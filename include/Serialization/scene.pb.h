// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scene_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scene_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "scripts.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scene_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scene_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_2eproto;
namespace serial {
class BasicGameObject;
struct BasicGameObjectDefaultTypeInternal;
extern BasicGameObjectDefaultTypeInternal _BasicGameObject_default_instance_;
class Camera;
struct CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
class GameObject;
struct GameObjectDefaultTypeInternal;
extern GameObjectDefaultTypeInternal _GameObject_default_instance_;
class Scene;
struct SceneDefaultTypeInternal;
extern SceneDefaultTypeInternal _Scene_default_instance_;
class Script;
struct ScriptDefaultTypeInternal;
extern ScriptDefaultTypeInternal _Script_default_instance_;
class Sprite;
struct SpriteDefaultTypeInternal;
extern SpriteDefaultTypeInternal _Sprite_default_instance_;
class Sprite_Scale;
struct Sprite_ScaleDefaultTypeInternal;
extern Sprite_ScaleDefaultTypeInternal _Sprite_Scale_default_instance_;
}  // namespace serial
PROTOBUF_NAMESPACE_OPEN
template<> ::serial::BasicGameObject* Arena::CreateMaybeMessage<::serial::BasicGameObject>(Arena*);
template<> ::serial::Camera* Arena::CreateMaybeMessage<::serial::Camera>(Arena*);
template<> ::serial::GameObject* Arena::CreateMaybeMessage<::serial::GameObject>(Arena*);
template<> ::serial::Scene* Arena::CreateMaybeMessage<::serial::Scene>(Arena*);
template<> ::serial::Script* Arena::CreateMaybeMessage<::serial::Script>(Arena*);
template<> ::serial::Sprite* Arena::CreateMaybeMessage<::serial::Sprite>(Arena*);
template<> ::serial::Sprite_Scale* Arena::CreateMaybeMessage<::serial::Sprite_Scale>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace serial {

enum RenderLayer : int {
  BACKGROUND = 0,
  BACKGROUND1 = 1,
  BACKGROUND2 = 2,
  BACKGROUND3 = 3,
  FOREGROUND = 4,
  FOREGROUND1 = 5,
  FOREGROUND2 = 6,
  FOREGROUND3 = 7,
  ONTOP = 8,
  RenderLayer_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RenderLayer_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RenderLayer_IsValid(int value);
constexpr RenderLayer RenderLayer_MIN = BACKGROUND;
constexpr RenderLayer RenderLayer_MAX = ONTOP;
constexpr int RenderLayer_ARRAYSIZE = RenderLayer_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RenderLayer_descriptor();
template<typename T>
inline const std::string& RenderLayer_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RenderLayer>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RenderLayer_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RenderLayer_descriptor(), enum_t_value);
}
inline bool RenderLayer_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RenderLayer* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RenderLayer>(
    RenderLayer_descriptor(), name, value);
}
enum Box2DType : int {
  STATIC = 0,
  DYNAMIC = 1,
  Box2DType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Box2DType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Box2DType_IsValid(int value);
constexpr Box2DType Box2DType_MIN = STATIC;
constexpr Box2DType Box2DType_MAX = DYNAMIC;
constexpr int Box2DType_ARRAYSIZE = Box2DType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Box2DType_descriptor();
template<typename T>
inline const std::string& Box2DType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Box2DType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Box2DType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Box2DType_descriptor(), enum_t_value);
}
inline bool Box2DType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Box2DType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Box2DType>(
    Box2DType_descriptor(), name, value);
}
// ===================================================================

class Scene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.Scene) */ {
 public:
  inline Scene() : Scene(nullptr) {}
  ~Scene() override;
  explicit constexpr Scene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scene(const Scene& from);
  Scene(Scene&& from) noexcept
    : Scene() {
    *this = ::std::move(from);
  }

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene& operator=(Scene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene* internal_default_instance() {
    return reinterpret_cast<const Scene*>(
               &_Scene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Scene& a, Scene& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scene>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scene& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Scene& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.Scene";
  }
  protected:
  explicit Scene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameObjectFieldNumber = 1,
    kCameraFieldNumber = 2,
  };
  // repeated .serial.GameObject game_object = 1;
  int game_object_size() const;
  private:
  int _internal_game_object_size() const;
  public:
  void clear_game_object();
  ::serial::GameObject* mutable_game_object(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::GameObject >*
      mutable_game_object();
  private:
  const ::serial::GameObject& _internal_game_object(int index) const;
  ::serial::GameObject* _internal_add_game_object();
  public:
  const ::serial::GameObject& game_object(int index) const;
  ::serial::GameObject* add_game_object();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::GameObject >&
      game_object() const;

  // .serial.Camera camera = 2;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const ::serial::Camera& camera() const;
  PROTOBUF_NODISCARD ::serial::Camera* release_camera();
  ::serial::Camera* mutable_camera();
  void set_allocated_camera(::serial::Camera* camera);
  private:
  const ::serial::Camera& _internal_camera() const;
  ::serial::Camera* _internal_mutable_camera();
  public:
  void unsafe_arena_set_allocated_camera(
      ::serial::Camera* camera);
  ::serial::Camera* unsafe_arena_release_camera();

  // @@protoc_insertion_point(class_scope:serial.Scene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::GameObject > game_object_;
  ::serial::Camera* camera_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Camera final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:serial.Camera) */ {
 public:
  inline Camera() : Camera(nullptr) {}
  explicit constexpr Camera(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Camera(const Camera& from);
  Camera(Camera&& from) noexcept
    : Camera() {
    *this = ::std::move(from);
  }

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera& operator=(Camera&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Camera& default_instance() {
    return *internal_default_instance();
  }
  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
               &_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Camera& a, Camera& b) {
    a.Swap(&b);
  }
  inline void Swap(Camera* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Camera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Camera>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Camera& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Camera& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.Camera";
  }
  protected:
  explicit Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:serial.Camera)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class GameObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.GameObject) */ {
 public:
  inline GameObject() : GameObject(nullptr) {}
  ~GameObject() override;
  explicit constexpr GameObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameObject(const GameObject& from);
  GameObject(GameObject&& from) noexcept
    : GameObject() {
    *this = ::std::move(from);
  }

  inline GameObject& operator=(const GameObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameObject& operator=(GameObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameObject& default_instance() {
    return *internal_default_instance();
  }
  enum GameObjectInstanceCase {
    kBasicGameObject = 1,
    GAME_OBJECT_INSTANCE_NOT_SET = 0,
  };

  static inline const GameObject* internal_default_instance() {
    return reinterpret_cast<const GameObject*>(
               &_GameObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GameObject& a, GameObject& b) {
    a.Swap(&b);
  }
  inline void Swap(GameObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameObject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.GameObject";
  }
  protected:
  explicit GameObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasicGameObjectFieldNumber = 1,
  };
  // .serial.BasicGameObject basic_game_object = 1;
  bool has_basic_game_object() const;
  private:
  bool _internal_has_basic_game_object() const;
  public:
  void clear_basic_game_object();
  const ::serial::BasicGameObject& basic_game_object() const;
  PROTOBUF_NODISCARD ::serial::BasicGameObject* release_basic_game_object();
  ::serial::BasicGameObject* mutable_basic_game_object();
  void set_allocated_basic_game_object(::serial::BasicGameObject* basic_game_object);
  private:
  const ::serial::BasicGameObject& _internal_basic_game_object() const;
  ::serial::BasicGameObject* _internal_mutable_basic_game_object();
  public:
  void unsafe_arena_set_allocated_basic_game_object(
      ::serial::BasicGameObject* basic_game_object);
  ::serial::BasicGameObject* unsafe_arena_release_basic_game_object();

  void clear_game_object_instance();
  GameObjectInstanceCase game_object_instance_case() const;
  // @@protoc_insertion_point(class_scope:serial.GameObject)
 private:
  class _Internal;
  void set_has_basic_game_object();

  inline bool has_game_object_instance() const;
  inline void clear_has_game_object_instance();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union GameObjectInstanceUnion {
    constexpr GameObjectInstanceUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::serial::BasicGameObject* basic_game_object_;
  } game_object_instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Script final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.Script) */ {
 public:
  inline Script() : Script(nullptr) {}
  ~Script() override;
  explicit constexpr Script(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Script(const Script& from);
  Script(Script&& from) noexcept
    : Script() {
    *this = ::std::move(from);
  }

  inline Script& operator=(const Script& from) {
    CopyFrom(from);
    return *this;
  }
  inline Script& operator=(Script&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Script& default_instance() {
    return *internal_default_instance();
  }
  enum ScriptInstanceCase {
    kPlayerAnimation = 1,
    kExampleCameraScript = 2,
    kExampleClockedScript = 3,
    kReloadSceneScript = 4,
    kCameraScript = 5,
    kButtonScript = 6,
    kClockedScript = 7,
    kExampleScript = 8,
    kStraightWeaponScript = 9,
    kWeaponScript = 10,
    kBulletScript = 11,
    kNetworkPlayerScript = 12,
    kCursorAnimation = 13,
    SCRIPT_INSTANCE_NOT_SET = 0,
  };

  static inline const Script* internal_default_instance() {
    return reinterpret_cast<const Script*>(
               &_Script_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Script& a, Script& b) {
    a.Swap(&b);
  }
  inline void Swap(Script* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Script* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Script* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Script>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Script& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Script& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Script* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.Script";
  }
  protected:
  explicit Script(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoIdFieldNumber = 14,
    kPlayerAnimationFieldNumber = 1,
    kExampleCameraScriptFieldNumber = 2,
    kExampleClockedScriptFieldNumber = 3,
    kReloadSceneScriptFieldNumber = 4,
    kCameraScriptFieldNumber = 5,
    kButtonScriptFieldNumber = 6,
    kClockedScriptFieldNumber = 7,
    kExampleScriptFieldNumber = 8,
    kStraightWeaponScriptFieldNumber = 9,
    kWeaponScriptFieldNumber = 10,
    kBulletScriptFieldNumber = 11,
    kNetworkPlayerScriptFieldNumber = 12,
    kCursorAnimationFieldNumber = 13,
  };
  // uint32 go_id = 14;
  void clear_go_id();
  uint32_t go_id() const;
  void set_go_id(uint32_t value);
  private:
  uint32_t _internal_go_id() const;
  void _internal_set_go_id(uint32_t value);
  public:

  // .serial.PlayerAnimation player_animation = 1;
  bool has_player_animation() const;
  private:
  bool _internal_has_player_animation() const;
  public:
  void clear_player_animation();
  const ::serial::PlayerAnimation& player_animation() const;
  PROTOBUF_NODISCARD ::serial::PlayerAnimation* release_player_animation();
  ::serial::PlayerAnimation* mutable_player_animation();
  void set_allocated_player_animation(::serial::PlayerAnimation* player_animation);
  private:
  const ::serial::PlayerAnimation& _internal_player_animation() const;
  ::serial::PlayerAnimation* _internal_mutable_player_animation();
  public:
  void unsafe_arena_set_allocated_player_animation(
      ::serial::PlayerAnimation* player_animation);
  ::serial::PlayerAnimation* unsafe_arena_release_player_animation();

  // .serial.ExampleCameraScript example_camera_script = 2;
  bool has_example_camera_script() const;
  private:
  bool _internal_has_example_camera_script() const;
  public:
  void clear_example_camera_script();
  const ::serial::ExampleCameraScript& example_camera_script() const;
  PROTOBUF_NODISCARD ::serial::ExampleCameraScript* release_example_camera_script();
  ::serial::ExampleCameraScript* mutable_example_camera_script();
  void set_allocated_example_camera_script(::serial::ExampleCameraScript* example_camera_script);
  private:
  const ::serial::ExampleCameraScript& _internal_example_camera_script() const;
  ::serial::ExampleCameraScript* _internal_mutable_example_camera_script();
  public:
  void unsafe_arena_set_allocated_example_camera_script(
      ::serial::ExampleCameraScript* example_camera_script);
  ::serial::ExampleCameraScript* unsafe_arena_release_example_camera_script();

  // .serial.ExampleClockedScript example_clocked_script = 3;
  bool has_example_clocked_script() const;
  private:
  bool _internal_has_example_clocked_script() const;
  public:
  void clear_example_clocked_script();
  const ::serial::ExampleClockedScript& example_clocked_script() const;
  PROTOBUF_NODISCARD ::serial::ExampleClockedScript* release_example_clocked_script();
  ::serial::ExampleClockedScript* mutable_example_clocked_script();
  void set_allocated_example_clocked_script(::serial::ExampleClockedScript* example_clocked_script);
  private:
  const ::serial::ExampleClockedScript& _internal_example_clocked_script() const;
  ::serial::ExampleClockedScript* _internal_mutable_example_clocked_script();
  public:
  void unsafe_arena_set_allocated_example_clocked_script(
      ::serial::ExampleClockedScript* example_clocked_script);
  ::serial::ExampleClockedScript* unsafe_arena_release_example_clocked_script();

  // .serial.ReloadSceneScript reload_scene_script = 4;
  bool has_reload_scene_script() const;
  private:
  bool _internal_has_reload_scene_script() const;
  public:
  void clear_reload_scene_script();
  const ::serial::ReloadSceneScript& reload_scene_script() const;
  PROTOBUF_NODISCARD ::serial::ReloadSceneScript* release_reload_scene_script();
  ::serial::ReloadSceneScript* mutable_reload_scene_script();
  void set_allocated_reload_scene_script(::serial::ReloadSceneScript* reload_scene_script);
  private:
  const ::serial::ReloadSceneScript& _internal_reload_scene_script() const;
  ::serial::ReloadSceneScript* _internal_mutable_reload_scene_script();
  public:
  void unsafe_arena_set_allocated_reload_scene_script(
      ::serial::ReloadSceneScript* reload_scene_script);
  ::serial::ReloadSceneScript* unsafe_arena_release_reload_scene_script();

  // .serial.CameraScript camera_script = 5;
  bool has_camera_script() const;
  private:
  bool _internal_has_camera_script() const;
  public:
  void clear_camera_script();
  const ::serial::CameraScript& camera_script() const;
  PROTOBUF_NODISCARD ::serial::CameraScript* release_camera_script();
  ::serial::CameraScript* mutable_camera_script();
  void set_allocated_camera_script(::serial::CameraScript* camera_script);
  private:
  const ::serial::CameraScript& _internal_camera_script() const;
  ::serial::CameraScript* _internal_mutable_camera_script();
  public:
  void unsafe_arena_set_allocated_camera_script(
      ::serial::CameraScript* camera_script);
  ::serial::CameraScript* unsafe_arena_release_camera_script();

  // .serial.ButtonScript button_script = 6;
  bool has_button_script() const;
  private:
  bool _internal_has_button_script() const;
  public:
  void clear_button_script();
  const ::serial::ButtonScript& button_script() const;
  PROTOBUF_NODISCARD ::serial::ButtonScript* release_button_script();
  ::serial::ButtonScript* mutable_button_script();
  void set_allocated_button_script(::serial::ButtonScript* button_script);
  private:
  const ::serial::ButtonScript& _internal_button_script() const;
  ::serial::ButtonScript* _internal_mutable_button_script();
  public:
  void unsafe_arena_set_allocated_button_script(
      ::serial::ButtonScript* button_script);
  ::serial::ButtonScript* unsafe_arena_release_button_script();

  // .serial.ClockedScript clocked_script = 7;
  bool has_clocked_script() const;
  private:
  bool _internal_has_clocked_script() const;
  public:
  void clear_clocked_script();
  const ::serial::ClockedScript& clocked_script() const;
  PROTOBUF_NODISCARD ::serial::ClockedScript* release_clocked_script();
  ::serial::ClockedScript* mutable_clocked_script();
  void set_allocated_clocked_script(::serial::ClockedScript* clocked_script);
  private:
  const ::serial::ClockedScript& _internal_clocked_script() const;
  ::serial::ClockedScript* _internal_mutable_clocked_script();
  public:
  void unsafe_arena_set_allocated_clocked_script(
      ::serial::ClockedScript* clocked_script);
  ::serial::ClockedScript* unsafe_arena_release_clocked_script();

  // .serial.ExampleScript example_script = 8;
  bool has_example_script() const;
  private:
  bool _internal_has_example_script() const;
  public:
  void clear_example_script();
  const ::serial::ExampleScript& example_script() const;
  PROTOBUF_NODISCARD ::serial::ExampleScript* release_example_script();
  ::serial::ExampleScript* mutable_example_script();
  void set_allocated_example_script(::serial::ExampleScript* example_script);
  private:
  const ::serial::ExampleScript& _internal_example_script() const;
  ::serial::ExampleScript* _internal_mutable_example_script();
  public:
  void unsafe_arena_set_allocated_example_script(
      ::serial::ExampleScript* example_script);
  ::serial::ExampleScript* unsafe_arena_release_example_script();

  // .serial.StraightWeaponScript straight_weapon_script = 9;
  bool has_straight_weapon_script() const;
  private:
  bool _internal_has_straight_weapon_script() const;
  public:
  void clear_straight_weapon_script();
  const ::serial::StraightWeaponScript& straight_weapon_script() const;
  PROTOBUF_NODISCARD ::serial::StraightWeaponScript* release_straight_weapon_script();
  ::serial::StraightWeaponScript* mutable_straight_weapon_script();
  void set_allocated_straight_weapon_script(::serial::StraightWeaponScript* straight_weapon_script);
  private:
  const ::serial::StraightWeaponScript& _internal_straight_weapon_script() const;
  ::serial::StraightWeaponScript* _internal_mutable_straight_weapon_script();
  public:
  void unsafe_arena_set_allocated_straight_weapon_script(
      ::serial::StraightWeaponScript* straight_weapon_script);
  ::serial::StraightWeaponScript* unsafe_arena_release_straight_weapon_script();

  // .serial.WeaponScript weapon_script = 10;
  bool has_weapon_script() const;
  private:
  bool _internal_has_weapon_script() const;
  public:
  void clear_weapon_script();
  const ::serial::WeaponScript& weapon_script() const;
  PROTOBUF_NODISCARD ::serial::WeaponScript* release_weapon_script();
  ::serial::WeaponScript* mutable_weapon_script();
  void set_allocated_weapon_script(::serial::WeaponScript* weapon_script);
  private:
  const ::serial::WeaponScript& _internal_weapon_script() const;
  ::serial::WeaponScript* _internal_mutable_weapon_script();
  public:
  void unsafe_arena_set_allocated_weapon_script(
      ::serial::WeaponScript* weapon_script);
  ::serial::WeaponScript* unsafe_arena_release_weapon_script();

  // .serial.BulletScript bullet_script = 11;
  bool has_bullet_script() const;
  private:
  bool _internal_has_bullet_script() const;
  public:
  void clear_bullet_script();
  const ::serial::BulletScript& bullet_script() const;
  PROTOBUF_NODISCARD ::serial::BulletScript* release_bullet_script();
  ::serial::BulletScript* mutable_bullet_script();
  void set_allocated_bullet_script(::serial::BulletScript* bullet_script);
  private:
  const ::serial::BulletScript& _internal_bullet_script() const;
  ::serial::BulletScript* _internal_mutable_bullet_script();
  public:
  void unsafe_arena_set_allocated_bullet_script(
      ::serial::BulletScript* bullet_script);
  ::serial::BulletScript* unsafe_arena_release_bullet_script();

  // .serial.NetworkPlayerScript network_player_script = 12;
  bool has_network_player_script() const;
  private:
  bool _internal_has_network_player_script() const;
  public:
  void clear_network_player_script();
  const ::serial::NetworkPlayerScript& network_player_script() const;
  PROTOBUF_NODISCARD ::serial::NetworkPlayerScript* release_network_player_script();
  ::serial::NetworkPlayerScript* mutable_network_player_script();
  void set_allocated_network_player_script(::serial::NetworkPlayerScript* network_player_script);
  private:
  const ::serial::NetworkPlayerScript& _internal_network_player_script() const;
  ::serial::NetworkPlayerScript* _internal_mutable_network_player_script();
  public:
  void unsafe_arena_set_allocated_network_player_script(
      ::serial::NetworkPlayerScript* network_player_script);
  ::serial::NetworkPlayerScript* unsafe_arena_release_network_player_script();

  // .serial.CursorAnimation cursor_animation = 13;
  bool has_cursor_animation() const;
  private:
  bool _internal_has_cursor_animation() const;
  public:
  void clear_cursor_animation();
  const ::serial::CursorAnimation& cursor_animation() const;
  PROTOBUF_NODISCARD ::serial::CursorAnimation* release_cursor_animation();
  ::serial::CursorAnimation* mutable_cursor_animation();
  void set_allocated_cursor_animation(::serial::CursorAnimation* cursor_animation);
  private:
  const ::serial::CursorAnimation& _internal_cursor_animation() const;
  ::serial::CursorAnimation* _internal_mutable_cursor_animation();
  public:
  void unsafe_arena_set_allocated_cursor_animation(
      ::serial::CursorAnimation* cursor_animation);
  ::serial::CursorAnimation* unsafe_arena_release_cursor_animation();

  void clear_script_instance();
  ScriptInstanceCase script_instance_case() const;
  // @@protoc_insertion_point(class_scope:serial.Script)
 private:
  class _Internal;
  void set_has_player_animation();
  void set_has_example_camera_script();
  void set_has_example_clocked_script();
  void set_has_reload_scene_script();
  void set_has_camera_script();
  void set_has_button_script();
  void set_has_clocked_script();
  void set_has_example_script();
  void set_has_straight_weapon_script();
  void set_has_weapon_script();
  void set_has_bullet_script();
  void set_has_network_player_script();
  void set_has_cursor_animation();

  inline bool has_script_instance() const;
  inline void clear_has_script_instance();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t go_id_;
  union ScriptInstanceUnion {
    constexpr ScriptInstanceUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::serial::PlayerAnimation* player_animation_;
    ::serial::ExampleCameraScript* example_camera_script_;
    ::serial::ExampleClockedScript* example_clocked_script_;
    ::serial::ReloadSceneScript* reload_scene_script_;
    ::serial::CameraScript* camera_script_;
    ::serial::ButtonScript* button_script_;
    ::serial::ClockedScript* clocked_script_;
    ::serial::ExampleScript* example_script_;
    ::serial::StraightWeaponScript* straight_weapon_script_;
    ::serial::WeaponScript* weapon_script_;
    ::serial::BulletScript* bullet_script_;
    ::serial::NetworkPlayerScript* network_player_script_;
    ::serial::CursorAnimation* cursor_animation_;
  } script_instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class BasicGameObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.BasicGameObject) */ {
 public:
  inline BasicGameObject() : BasicGameObject(nullptr) {}
  ~BasicGameObject() override;
  explicit constexpr BasicGameObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BasicGameObject(const BasicGameObject& from);
  BasicGameObject(BasicGameObject&& from) noexcept
    : BasicGameObject() {
    *this = ::std::move(from);
  }

  inline BasicGameObject& operator=(const BasicGameObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicGameObject& operator=(BasicGameObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BasicGameObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasicGameObject* internal_default_instance() {
    return reinterpret_cast<const BasicGameObject*>(
               &_BasicGameObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BasicGameObject& a, BasicGameObject& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicGameObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasicGameObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BasicGameObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BasicGameObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BasicGameObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BasicGameObject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicGameObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.BasicGameObject";
  }
  protected:
  explicit BasicGameObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenObjectsFieldNumber = 1,
    kChildrenScriptsFieldNumber = 2,
    kTagsFieldNumber = 3,
    kSpriteFieldNumber = 4,
    kVisibleFieldNumber = 5,
    kBox2DTypeFieldNumber = 6,
    kRenderLayerFieldNumber = 7,
    kIdFieldNumber = 8,
  };
  // repeated .serial.GameObject children_objects = 1;
  int children_objects_size() const;
  private:
  int _internal_children_objects_size() const;
  public:
  void clear_children_objects();
  ::serial::GameObject* mutable_children_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::GameObject >*
      mutable_children_objects();
  private:
  const ::serial::GameObject& _internal_children_objects(int index) const;
  ::serial::GameObject* _internal_add_children_objects();
  public:
  const ::serial::GameObject& children_objects(int index) const;
  ::serial::GameObject* add_children_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::GameObject >&
      children_objects() const;

  // repeated .serial.Script children_scripts = 2;
  int children_scripts_size() const;
  private:
  int _internal_children_scripts_size() const;
  public:
  void clear_children_scripts();
  ::serial::Script* mutable_children_scripts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::Script >*
      mutable_children_scripts();
  private:
  const ::serial::Script& _internal_children_scripts(int index) const;
  ::serial::Script* _internal_add_children_scripts();
  public:
  const ::serial::Script& children_scripts(int index) const;
  ::serial::Script* add_children_scripts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::Script >&
      children_scripts() const;

  // repeated string tags = 3;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // .serial.Sprite sprite = 4;
  bool has_sprite() const;
  private:
  bool _internal_has_sprite() const;
  public:
  void clear_sprite();
  const ::serial::Sprite& sprite() const;
  PROTOBUF_NODISCARD ::serial::Sprite* release_sprite();
  ::serial::Sprite* mutable_sprite();
  void set_allocated_sprite(::serial::Sprite* sprite);
  private:
  const ::serial::Sprite& _internal_sprite() const;
  ::serial::Sprite* _internal_mutable_sprite();
  public:
  void unsafe_arena_set_allocated_sprite(
      ::serial::Sprite* sprite);
  ::serial::Sprite* unsafe_arena_release_sprite();

  // bool visible = 5;
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // .serial.Box2DType box2d_type = 6;
  void clear_box2d_type();
  ::serial::Box2DType box2d_type() const;
  void set_box2d_type(::serial::Box2DType value);
  private:
  ::serial::Box2DType _internal_box2d_type() const;
  void _internal_set_box2d_type(::serial::Box2DType value);
  public:

  // .serial.RenderLayer render_layer = 7;
  void clear_render_layer();
  ::serial::RenderLayer render_layer() const;
  void set_render_layer(::serial::RenderLayer value);
  private:
  ::serial::RenderLayer _internal_render_layer() const;
  void _internal_set_render_layer(::serial::RenderLayer value);
  public:

  // uint32 id = 8;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:serial.BasicGameObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::GameObject > children_objects_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::Script > children_scripts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::serial::Sprite* sprite_;
  bool visible_;
  int box2d_type_;
  int render_layer_;
  uint32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Sprite_Scale final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.Sprite.Scale) */ {
 public:
  inline Sprite_Scale() : Sprite_Scale(nullptr) {}
  ~Sprite_Scale() override;
  explicit constexpr Sprite_Scale(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sprite_Scale(const Sprite_Scale& from);
  Sprite_Scale(Sprite_Scale&& from) noexcept
    : Sprite_Scale() {
    *this = ::std::move(from);
  }

  inline Sprite_Scale& operator=(const Sprite_Scale& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sprite_Scale& operator=(Sprite_Scale&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sprite_Scale& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sprite_Scale* internal_default_instance() {
    return reinterpret_cast<const Sprite_Scale*>(
               &_Sprite_Scale_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Sprite_Scale& a, Sprite_Scale& b) {
    a.Swap(&b);
  }
  inline void Swap(Sprite_Scale* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sprite_Scale* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sprite_Scale* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sprite_Scale>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sprite_Scale& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Sprite_Scale& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sprite_Scale* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.Sprite.Scale";
  }
  protected:
  explicit Sprite_Scale(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleXFieldNumber = 1,
    kScaleYFieldNumber = 2,
  };
  // float scale_x = 1;
  void clear_scale_x();
  float scale_x() const;
  void set_scale_x(float value);
  private:
  float _internal_scale_x() const;
  void _internal_set_scale_x(float value);
  public:

  // float scale_y = 2;
  void clear_scale_y();
  float scale_y() const;
  void set_scale_y(float value);
  private:
  float _internal_scale_y() const;
  void _internal_set_scale_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:serial.Sprite.Scale)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float scale_x_;
  float scale_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Sprite final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.Sprite) */ {
 public:
  inline Sprite() : Sprite(nullptr) {}
  ~Sprite() override;
  explicit constexpr Sprite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sprite(const Sprite& from);
  Sprite(Sprite&& from) noexcept
    : Sprite() {
    *this = ::std::move(from);
  }

  inline Sprite& operator=(const Sprite& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sprite& operator=(Sprite&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sprite& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sprite* internal_default_instance() {
    return reinterpret_cast<const Sprite*>(
               &_Sprite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Sprite& a, Sprite& b) {
    a.Swap(&b);
  }
  inline void Swap(Sprite* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sprite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sprite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sprite>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sprite& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Sprite& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sprite* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.Sprite";
  }
  protected:
  explicit Sprite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Sprite_Scale Scale;

  // accessors -------------------------------------------------------

  enum : int {
    kTexturePathFieldNumber = 1,
    kPositionFieldNumber = 2,
    kScaleFieldNumber = 5,
  };
  // string texture_path = 1;
  void clear_texture_path();
  const std::string& texture_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_texture_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_texture_path();
  PROTOBUF_NODISCARD std::string* release_texture_path();
  void set_allocated_texture_path(std::string* texture_path);
  private:
  const std::string& _internal_texture_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_texture_path(const std::string& value);
  std::string* _internal_mutable_texture_path();
  public:

  // .serial.Vector2f position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::serial::Vector2f& position() const;
  PROTOBUF_NODISCARD ::serial::Vector2f* release_position();
  ::serial::Vector2f* mutable_position();
  void set_allocated_position(::serial::Vector2f* position);
  private:
  const ::serial::Vector2f& _internal_position() const;
  ::serial::Vector2f* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::serial::Vector2f* position);
  ::serial::Vector2f* unsafe_arena_release_position();

  // .serial.Sprite.Scale scale = 5;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::serial::Sprite_Scale& scale() const;
  PROTOBUF_NODISCARD ::serial::Sprite_Scale* release_scale();
  ::serial::Sprite_Scale* mutable_scale();
  void set_allocated_scale(::serial::Sprite_Scale* scale);
  private:
  const ::serial::Sprite_Scale& _internal_scale() const;
  ::serial::Sprite_Scale* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::serial::Sprite_Scale* scale);
  ::serial::Sprite_Scale* unsafe_arena_release_scale();

  // @@protoc_insertion_point(class_scope:serial.Sprite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr texture_path_;
  ::serial::Vector2f* position_;
  ::serial::Sprite_Scale* scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Scene

// repeated .serial.GameObject game_object = 1;
inline int Scene::_internal_game_object_size() const {
  return game_object_.size();
}
inline int Scene::game_object_size() const {
  return _internal_game_object_size();
}
inline void Scene::clear_game_object() {
  game_object_.Clear();
}
inline ::serial::GameObject* Scene::mutable_game_object(int index) {
  // @@protoc_insertion_point(field_mutable:serial.Scene.game_object)
  return game_object_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::GameObject >*
Scene::mutable_game_object() {
  // @@protoc_insertion_point(field_mutable_list:serial.Scene.game_object)
  return &game_object_;
}
inline const ::serial::GameObject& Scene::_internal_game_object(int index) const {
  return game_object_.Get(index);
}
inline const ::serial::GameObject& Scene::game_object(int index) const {
  // @@protoc_insertion_point(field_get:serial.Scene.game_object)
  return _internal_game_object(index);
}
inline ::serial::GameObject* Scene::_internal_add_game_object() {
  return game_object_.Add();
}
inline ::serial::GameObject* Scene::add_game_object() {
  ::serial::GameObject* _add = _internal_add_game_object();
  // @@protoc_insertion_point(field_add:serial.Scene.game_object)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::GameObject >&
Scene::game_object() const {
  // @@protoc_insertion_point(field_list:serial.Scene.game_object)
  return game_object_;
}

// .serial.Camera camera = 2;
inline bool Scene::_internal_has_camera() const {
  return this != internal_default_instance() && camera_ != nullptr;
}
inline bool Scene::has_camera() const {
  return _internal_has_camera();
}
inline void Scene::clear_camera() {
  if (GetArenaForAllocation() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
}
inline const ::serial::Camera& Scene::_internal_camera() const {
  const ::serial::Camera* p = camera_;
  return p != nullptr ? *p : reinterpret_cast<const ::serial::Camera&>(
      ::serial::_Camera_default_instance_);
}
inline const ::serial::Camera& Scene::camera() const {
  // @@protoc_insertion_point(field_get:serial.Scene.camera)
  return _internal_camera();
}
inline void Scene::unsafe_arena_set_allocated_camera(
    ::serial::Camera* camera) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_);
  }
  camera_ = camera;
  if (camera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Scene.camera)
}
inline ::serial::Camera* Scene::release_camera() {
  
  ::serial::Camera* temp = camera_;
  camera_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serial::Camera* Scene::unsafe_arena_release_camera() {
  // @@protoc_insertion_point(field_release:serial.Scene.camera)
  
  ::serial::Camera* temp = camera_;
  camera_ = nullptr;
  return temp;
}
inline ::serial::Camera* Scene::_internal_mutable_camera() {
  
  if (camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::serial::Camera>(GetArenaForAllocation());
    camera_ = p;
  }
  return camera_;
}
inline ::serial::Camera* Scene::mutable_camera() {
  ::serial::Camera* _msg = _internal_mutable_camera();
  // @@protoc_insertion_point(field_mutable:serial.Scene.camera)
  return _msg;
}
inline void Scene::set_allocated_camera(::serial::Camera* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete camera_;
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::serial::Camera>::GetOwningArena(camera);
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    
  } else {
    
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:serial.Scene.camera)
}

// -------------------------------------------------------------------

// Camera

// -------------------------------------------------------------------

// GameObject

// .serial.BasicGameObject basic_game_object = 1;
inline bool GameObject::_internal_has_basic_game_object() const {
  return game_object_instance_case() == kBasicGameObject;
}
inline bool GameObject::has_basic_game_object() const {
  return _internal_has_basic_game_object();
}
inline void GameObject::set_has_basic_game_object() {
  _oneof_case_[0] = kBasicGameObject;
}
inline void GameObject::clear_basic_game_object() {
  if (_internal_has_basic_game_object()) {
    if (GetArenaForAllocation() == nullptr) {
      delete game_object_instance_.basic_game_object_;
    }
    clear_has_game_object_instance();
  }
}
inline ::serial::BasicGameObject* GameObject::release_basic_game_object() {
  // @@protoc_insertion_point(field_release:serial.GameObject.basic_game_object)
  if (_internal_has_basic_game_object()) {
    clear_has_game_object_instance();
      ::serial::BasicGameObject* temp = game_object_instance_.basic_game_object_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    game_object_instance_.basic_game_object_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::serial::BasicGameObject& GameObject::_internal_basic_game_object() const {
  return _internal_has_basic_game_object()
      ? *game_object_instance_.basic_game_object_
      : reinterpret_cast< ::serial::BasicGameObject&>(::serial::_BasicGameObject_default_instance_);
}
inline const ::serial::BasicGameObject& GameObject::basic_game_object() const {
  // @@protoc_insertion_point(field_get:serial.GameObject.basic_game_object)
  return _internal_basic_game_object();
}
inline ::serial::BasicGameObject* GameObject::unsafe_arena_release_basic_game_object() {
  // @@protoc_insertion_point(field_unsafe_arena_release:serial.GameObject.basic_game_object)
  if (_internal_has_basic_game_object()) {
    clear_has_game_object_instance();
    ::serial::BasicGameObject* temp = game_object_instance_.basic_game_object_;
    game_object_instance_.basic_game_object_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameObject::unsafe_arena_set_allocated_basic_game_object(::serial::BasicGameObject* basic_game_object) {
  clear_game_object_instance();
  if (basic_game_object) {
    set_has_basic_game_object();
    game_object_instance_.basic_game_object_ = basic_game_object;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.GameObject.basic_game_object)
}
inline ::serial::BasicGameObject* GameObject::_internal_mutable_basic_game_object() {
  if (!_internal_has_basic_game_object()) {
    clear_game_object_instance();
    set_has_basic_game_object();
    game_object_instance_.basic_game_object_ = CreateMaybeMessage< ::serial::BasicGameObject >(GetArenaForAllocation());
  }
  return game_object_instance_.basic_game_object_;
}
inline ::serial::BasicGameObject* GameObject::mutable_basic_game_object() {
  ::serial::BasicGameObject* _msg = _internal_mutable_basic_game_object();
  // @@protoc_insertion_point(field_mutable:serial.GameObject.basic_game_object)
  return _msg;
}

inline bool GameObject::has_game_object_instance() const {
  return game_object_instance_case() != GAME_OBJECT_INSTANCE_NOT_SET;
}
inline void GameObject::clear_has_game_object_instance() {
  _oneof_case_[0] = GAME_OBJECT_INSTANCE_NOT_SET;
}
inline GameObject::GameObjectInstanceCase GameObject::game_object_instance_case() const {
  return GameObject::GameObjectInstanceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Script

// .serial.PlayerAnimation player_animation = 1;
inline bool Script::_internal_has_player_animation() const {
  return script_instance_case() == kPlayerAnimation;
}
inline bool Script::has_player_animation() const {
  return _internal_has_player_animation();
}
inline void Script::set_has_player_animation() {
  _oneof_case_[0] = kPlayerAnimation;
}
inline ::serial::PlayerAnimation* Script::release_player_animation() {
  // @@protoc_insertion_point(field_release:serial.Script.player_animation)
  if (_internal_has_player_animation()) {
    clear_has_script_instance();
      ::serial::PlayerAnimation* temp = script_instance_.player_animation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    script_instance_.player_animation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::serial::PlayerAnimation& Script::_internal_player_animation() const {
  return _internal_has_player_animation()
      ? *script_instance_.player_animation_
      : reinterpret_cast< ::serial::PlayerAnimation&>(::serial::_PlayerAnimation_default_instance_);
}
inline const ::serial::PlayerAnimation& Script::player_animation() const {
  // @@protoc_insertion_point(field_get:serial.Script.player_animation)
  return _internal_player_animation();
}
inline ::serial::PlayerAnimation* Script::unsafe_arena_release_player_animation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:serial.Script.player_animation)
  if (_internal_has_player_animation()) {
    clear_has_script_instance();
    ::serial::PlayerAnimation* temp = script_instance_.player_animation_;
    script_instance_.player_animation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Script::unsafe_arena_set_allocated_player_animation(::serial::PlayerAnimation* player_animation) {
  clear_script_instance();
  if (player_animation) {
    set_has_player_animation();
    script_instance_.player_animation_ = player_animation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Script.player_animation)
}
inline ::serial::PlayerAnimation* Script::_internal_mutable_player_animation() {
  if (!_internal_has_player_animation()) {
    clear_script_instance();
    set_has_player_animation();
    script_instance_.player_animation_ = CreateMaybeMessage< ::serial::PlayerAnimation >(GetArenaForAllocation());
  }
  return script_instance_.player_animation_;
}
inline ::serial::PlayerAnimation* Script::mutable_player_animation() {
  ::serial::PlayerAnimation* _msg = _internal_mutable_player_animation();
  // @@protoc_insertion_point(field_mutable:serial.Script.player_animation)
  return _msg;
}

// .serial.ExampleCameraScript example_camera_script = 2;
inline bool Script::_internal_has_example_camera_script() const {
  return script_instance_case() == kExampleCameraScript;
}
inline bool Script::has_example_camera_script() const {
  return _internal_has_example_camera_script();
}
inline void Script::set_has_example_camera_script() {
  _oneof_case_[0] = kExampleCameraScript;
}
inline ::serial::ExampleCameraScript* Script::release_example_camera_script() {
  // @@protoc_insertion_point(field_release:serial.Script.example_camera_script)
  if (_internal_has_example_camera_script()) {
    clear_has_script_instance();
      ::serial::ExampleCameraScript* temp = script_instance_.example_camera_script_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    script_instance_.example_camera_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::serial::ExampleCameraScript& Script::_internal_example_camera_script() const {
  return _internal_has_example_camera_script()
      ? *script_instance_.example_camera_script_
      : reinterpret_cast< ::serial::ExampleCameraScript&>(::serial::_ExampleCameraScript_default_instance_);
}
inline const ::serial::ExampleCameraScript& Script::example_camera_script() const {
  // @@protoc_insertion_point(field_get:serial.Script.example_camera_script)
  return _internal_example_camera_script();
}
inline ::serial::ExampleCameraScript* Script::unsafe_arena_release_example_camera_script() {
  // @@protoc_insertion_point(field_unsafe_arena_release:serial.Script.example_camera_script)
  if (_internal_has_example_camera_script()) {
    clear_has_script_instance();
    ::serial::ExampleCameraScript* temp = script_instance_.example_camera_script_;
    script_instance_.example_camera_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Script::unsafe_arena_set_allocated_example_camera_script(::serial::ExampleCameraScript* example_camera_script) {
  clear_script_instance();
  if (example_camera_script) {
    set_has_example_camera_script();
    script_instance_.example_camera_script_ = example_camera_script;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Script.example_camera_script)
}
inline ::serial::ExampleCameraScript* Script::_internal_mutable_example_camera_script() {
  if (!_internal_has_example_camera_script()) {
    clear_script_instance();
    set_has_example_camera_script();
    script_instance_.example_camera_script_ = CreateMaybeMessage< ::serial::ExampleCameraScript >(GetArenaForAllocation());
  }
  return script_instance_.example_camera_script_;
}
inline ::serial::ExampleCameraScript* Script::mutable_example_camera_script() {
  ::serial::ExampleCameraScript* _msg = _internal_mutable_example_camera_script();
  // @@protoc_insertion_point(field_mutable:serial.Script.example_camera_script)
  return _msg;
}

// .serial.ExampleClockedScript example_clocked_script = 3;
inline bool Script::_internal_has_example_clocked_script() const {
  return script_instance_case() == kExampleClockedScript;
}
inline bool Script::has_example_clocked_script() const {
  return _internal_has_example_clocked_script();
}
inline void Script::set_has_example_clocked_script() {
  _oneof_case_[0] = kExampleClockedScript;
}
inline ::serial::ExampleClockedScript* Script::release_example_clocked_script() {
  // @@protoc_insertion_point(field_release:serial.Script.example_clocked_script)
  if (_internal_has_example_clocked_script()) {
    clear_has_script_instance();
      ::serial::ExampleClockedScript* temp = script_instance_.example_clocked_script_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    script_instance_.example_clocked_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::serial::ExampleClockedScript& Script::_internal_example_clocked_script() const {
  return _internal_has_example_clocked_script()
      ? *script_instance_.example_clocked_script_
      : reinterpret_cast< ::serial::ExampleClockedScript&>(::serial::_ExampleClockedScript_default_instance_);
}
inline const ::serial::ExampleClockedScript& Script::example_clocked_script() const {
  // @@protoc_insertion_point(field_get:serial.Script.example_clocked_script)
  return _internal_example_clocked_script();
}
inline ::serial::ExampleClockedScript* Script::unsafe_arena_release_example_clocked_script() {
  // @@protoc_insertion_point(field_unsafe_arena_release:serial.Script.example_clocked_script)
  if (_internal_has_example_clocked_script()) {
    clear_has_script_instance();
    ::serial::ExampleClockedScript* temp = script_instance_.example_clocked_script_;
    script_instance_.example_clocked_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Script::unsafe_arena_set_allocated_example_clocked_script(::serial::ExampleClockedScript* example_clocked_script) {
  clear_script_instance();
  if (example_clocked_script) {
    set_has_example_clocked_script();
    script_instance_.example_clocked_script_ = example_clocked_script;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Script.example_clocked_script)
}
inline ::serial::ExampleClockedScript* Script::_internal_mutable_example_clocked_script() {
  if (!_internal_has_example_clocked_script()) {
    clear_script_instance();
    set_has_example_clocked_script();
    script_instance_.example_clocked_script_ = CreateMaybeMessage< ::serial::ExampleClockedScript >(GetArenaForAllocation());
  }
  return script_instance_.example_clocked_script_;
}
inline ::serial::ExampleClockedScript* Script::mutable_example_clocked_script() {
  ::serial::ExampleClockedScript* _msg = _internal_mutable_example_clocked_script();
  // @@protoc_insertion_point(field_mutable:serial.Script.example_clocked_script)
  return _msg;
}

// .serial.ReloadSceneScript reload_scene_script = 4;
inline bool Script::_internal_has_reload_scene_script() const {
  return script_instance_case() == kReloadSceneScript;
}
inline bool Script::has_reload_scene_script() const {
  return _internal_has_reload_scene_script();
}
inline void Script::set_has_reload_scene_script() {
  _oneof_case_[0] = kReloadSceneScript;
}
inline ::serial::ReloadSceneScript* Script::release_reload_scene_script() {
  // @@protoc_insertion_point(field_release:serial.Script.reload_scene_script)
  if (_internal_has_reload_scene_script()) {
    clear_has_script_instance();
      ::serial::ReloadSceneScript* temp = script_instance_.reload_scene_script_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    script_instance_.reload_scene_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::serial::ReloadSceneScript& Script::_internal_reload_scene_script() const {
  return _internal_has_reload_scene_script()
      ? *script_instance_.reload_scene_script_
      : reinterpret_cast< ::serial::ReloadSceneScript&>(::serial::_ReloadSceneScript_default_instance_);
}
inline const ::serial::ReloadSceneScript& Script::reload_scene_script() const {
  // @@protoc_insertion_point(field_get:serial.Script.reload_scene_script)
  return _internal_reload_scene_script();
}
inline ::serial::ReloadSceneScript* Script::unsafe_arena_release_reload_scene_script() {
  // @@protoc_insertion_point(field_unsafe_arena_release:serial.Script.reload_scene_script)
  if (_internal_has_reload_scene_script()) {
    clear_has_script_instance();
    ::serial::ReloadSceneScript* temp = script_instance_.reload_scene_script_;
    script_instance_.reload_scene_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Script::unsafe_arena_set_allocated_reload_scene_script(::serial::ReloadSceneScript* reload_scene_script) {
  clear_script_instance();
  if (reload_scene_script) {
    set_has_reload_scene_script();
    script_instance_.reload_scene_script_ = reload_scene_script;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Script.reload_scene_script)
}
inline ::serial::ReloadSceneScript* Script::_internal_mutable_reload_scene_script() {
  if (!_internal_has_reload_scene_script()) {
    clear_script_instance();
    set_has_reload_scene_script();
    script_instance_.reload_scene_script_ = CreateMaybeMessage< ::serial::ReloadSceneScript >(GetArenaForAllocation());
  }
  return script_instance_.reload_scene_script_;
}
inline ::serial::ReloadSceneScript* Script::mutable_reload_scene_script() {
  ::serial::ReloadSceneScript* _msg = _internal_mutable_reload_scene_script();
  // @@protoc_insertion_point(field_mutable:serial.Script.reload_scene_script)
  return _msg;
}

// .serial.CameraScript camera_script = 5;
inline bool Script::_internal_has_camera_script() const {
  return script_instance_case() == kCameraScript;
}
inline bool Script::has_camera_script() const {
  return _internal_has_camera_script();
}
inline void Script::set_has_camera_script() {
  _oneof_case_[0] = kCameraScript;
}
inline ::serial::CameraScript* Script::release_camera_script() {
  // @@protoc_insertion_point(field_release:serial.Script.camera_script)
  if (_internal_has_camera_script()) {
    clear_has_script_instance();
      ::serial::CameraScript* temp = script_instance_.camera_script_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    script_instance_.camera_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::serial::CameraScript& Script::_internal_camera_script() const {
  return _internal_has_camera_script()
      ? *script_instance_.camera_script_
      : reinterpret_cast< ::serial::CameraScript&>(::serial::_CameraScript_default_instance_);
}
inline const ::serial::CameraScript& Script::camera_script() const {
  // @@protoc_insertion_point(field_get:serial.Script.camera_script)
  return _internal_camera_script();
}
inline ::serial::CameraScript* Script::unsafe_arena_release_camera_script() {
  // @@protoc_insertion_point(field_unsafe_arena_release:serial.Script.camera_script)
  if (_internal_has_camera_script()) {
    clear_has_script_instance();
    ::serial::CameraScript* temp = script_instance_.camera_script_;
    script_instance_.camera_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Script::unsafe_arena_set_allocated_camera_script(::serial::CameraScript* camera_script) {
  clear_script_instance();
  if (camera_script) {
    set_has_camera_script();
    script_instance_.camera_script_ = camera_script;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Script.camera_script)
}
inline ::serial::CameraScript* Script::_internal_mutable_camera_script() {
  if (!_internal_has_camera_script()) {
    clear_script_instance();
    set_has_camera_script();
    script_instance_.camera_script_ = CreateMaybeMessage< ::serial::CameraScript >(GetArenaForAllocation());
  }
  return script_instance_.camera_script_;
}
inline ::serial::CameraScript* Script::mutable_camera_script() {
  ::serial::CameraScript* _msg = _internal_mutable_camera_script();
  // @@protoc_insertion_point(field_mutable:serial.Script.camera_script)
  return _msg;
}

// .serial.ButtonScript button_script = 6;
inline bool Script::_internal_has_button_script() const {
  return script_instance_case() == kButtonScript;
}
inline bool Script::has_button_script() const {
  return _internal_has_button_script();
}
inline void Script::set_has_button_script() {
  _oneof_case_[0] = kButtonScript;
}
inline ::serial::ButtonScript* Script::release_button_script() {
  // @@protoc_insertion_point(field_release:serial.Script.button_script)
  if (_internal_has_button_script()) {
    clear_has_script_instance();
      ::serial::ButtonScript* temp = script_instance_.button_script_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    script_instance_.button_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::serial::ButtonScript& Script::_internal_button_script() const {
  return _internal_has_button_script()
      ? *script_instance_.button_script_
      : reinterpret_cast< ::serial::ButtonScript&>(::serial::_ButtonScript_default_instance_);
}
inline const ::serial::ButtonScript& Script::button_script() const {
  // @@protoc_insertion_point(field_get:serial.Script.button_script)
  return _internal_button_script();
}
inline ::serial::ButtonScript* Script::unsafe_arena_release_button_script() {
  // @@protoc_insertion_point(field_unsafe_arena_release:serial.Script.button_script)
  if (_internal_has_button_script()) {
    clear_has_script_instance();
    ::serial::ButtonScript* temp = script_instance_.button_script_;
    script_instance_.button_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Script::unsafe_arena_set_allocated_button_script(::serial::ButtonScript* button_script) {
  clear_script_instance();
  if (button_script) {
    set_has_button_script();
    script_instance_.button_script_ = button_script;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Script.button_script)
}
inline ::serial::ButtonScript* Script::_internal_mutable_button_script() {
  if (!_internal_has_button_script()) {
    clear_script_instance();
    set_has_button_script();
    script_instance_.button_script_ = CreateMaybeMessage< ::serial::ButtonScript >(GetArenaForAllocation());
  }
  return script_instance_.button_script_;
}
inline ::serial::ButtonScript* Script::mutable_button_script() {
  ::serial::ButtonScript* _msg = _internal_mutable_button_script();
  // @@protoc_insertion_point(field_mutable:serial.Script.button_script)
  return _msg;
}

// .serial.ClockedScript clocked_script = 7;
inline bool Script::_internal_has_clocked_script() const {
  return script_instance_case() == kClockedScript;
}
inline bool Script::has_clocked_script() const {
  return _internal_has_clocked_script();
}
inline void Script::set_has_clocked_script() {
  _oneof_case_[0] = kClockedScript;
}
inline ::serial::ClockedScript* Script::release_clocked_script() {
  // @@protoc_insertion_point(field_release:serial.Script.clocked_script)
  if (_internal_has_clocked_script()) {
    clear_has_script_instance();
      ::serial::ClockedScript* temp = script_instance_.clocked_script_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    script_instance_.clocked_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::serial::ClockedScript& Script::_internal_clocked_script() const {
  return _internal_has_clocked_script()
      ? *script_instance_.clocked_script_
      : reinterpret_cast< ::serial::ClockedScript&>(::serial::_ClockedScript_default_instance_);
}
inline const ::serial::ClockedScript& Script::clocked_script() const {
  // @@protoc_insertion_point(field_get:serial.Script.clocked_script)
  return _internal_clocked_script();
}
inline ::serial::ClockedScript* Script::unsafe_arena_release_clocked_script() {
  // @@protoc_insertion_point(field_unsafe_arena_release:serial.Script.clocked_script)
  if (_internal_has_clocked_script()) {
    clear_has_script_instance();
    ::serial::ClockedScript* temp = script_instance_.clocked_script_;
    script_instance_.clocked_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Script::unsafe_arena_set_allocated_clocked_script(::serial::ClockedScript* clocked_script) {
  clear_script_instance();
  if (clocked_script) {
    set_has_clocked_script();
    script_instance_.clocked_script_ = clocked_script;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Script.clocked_script)
}
inline ::serial::ClockedScript* Script::_internal_mutable_clocked_script() {
  if (!_internal_has_clocked_script()) {
    clear_script_instance();
    set_has_clocked_script();
    script_instance_.clocked_script_ = CreateMaybeMessage< ::serial::ClockedScript >(GetArenaForAllocation());
  }
  return script_instance_.clocked_script_;
}
inline ::serial::ClockedScript* Script::mutable_clocked_script() {
  ::serial::ClockedScript* _msg = _internal_mutable_clocked_script();
  // @@protoc_insertion_point(field_mutable:serial.Script.clocked_script)
  return _msg;
}

// .serial.ExampleScript example_script = 8;
inline bool Script::_internal_has_example_script() const {
  return script_instance_case() == kExampleScript;
}
inline bool Script::has_example_script() const {
  return _internal_has_example_script();
}
inline void Script::set_has_example_script() {
  _oneof_case_[0] = kExampleScript;
}
inline ::serial::ExampleScript* Script::release_example_script() {
  // @@protoc_insertion_point(field_release:serial.Script.example_script)
  if (_internal_has_example_script()) {
    clear_has_script_instance();
      ::serial::ExampleScript* temp = script_instance_.example_script_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    script_instance_.example_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::serial::ExampleScript& Script::_internal_example_script() const {
  return _internal_has_example_script()
      ? *script_instance_.example_script_
      : reinterpret_cast< ::serial::ExampleScript&>(::serial::_ExampleScript_default_instance_);
}
inline const ::serial::ExampleScript& Script::example_script() const {
  // @@protoc_insertion_point(field_get:serial.Script.example_script)
  return _internal_example_script();
}
inline ::serial::ExampleScript* Script::unsafe_arena_release_example_script() {
  // @@protoc_insertion_point(field_unsafe_arena_release:serial.Script.example_script)
  if (_internal_has_example_script()) {
    clear_has_script_instance();
    ::serial::ExampleScript* temp = script_instance_.example_script_;
    script_instance_.example_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Script::unsafe_arena_set_allocated_example_script(::serial::ExampleScript* example_script) {
  clear_script_instance();
  if (example_script) {
    set_has_example_script();
    script_instance_.example_script_ = example_script;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Script.example_script)
}
inline ::serial::ExampleScript* Script::_internal_mutable_example_script() {
  if (!_internal_has_example_script()) {
    clear_script_instance();
    set_has_example_script();
    script_instance_.example_script_ = CreateMaybeMessage< ::serial::ExampleScript >(GetArenaForAllocation());
  }
  return script_instance_.example_script_;
}
inline ::serial::ExampleScript* Script::mutable_example_script() {
  ::serial::ExampleScript* _msg = _internal_mutable_example_script();
  // @@protoc_insertion_point(field_mutable:serial.Script.example_script)
  return _msg;
}

// .serial.StraightWeaponScript straight_weapon_script = 9;
inline bool Script::_internal_has_straight_weapon_script() const {
  return script_instance_case() == kStraightWeaponScript;
}
inline bool Script::has_straight_weapon_script() const {
  return _internal_has_straight_weapon_script();
}
inline void Script::set_has_straight_weapon_script() {
  _oneof_case_[0] = kStraightWeaponScript;
}
inline ::serial::StraightWeaponScript* Script::release_straight_weapon_script() {
  // @@protoc_insertion_point(field_release:serial.Script.straight_weapon_script)
  if (_internal_has_straight_weapon_script()) {
    clear_has_script_instance();
      ::serial::StraightWeaponScript* temp = script_instance_.straight_weapon_script_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    script_instance_.straight_weapon_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::serial::StraightWeaponScript& Script::_internal_straight_weapon_script() const {
  return _internal_has_straight_weapon_script()
      ? *script_instance_.straight_weapon_script_
      : reinterpret_cast< ::serial::StraightWeaponScript&>(::serial::_StraightWeaponScript_default_instance_);
}
inline const ::serial::StraightWeaponScript& Script::straight_weapon_script() const {
  // @@protoc_insertion_point(field_get:serial.Script.straight_weapon_script)
  return _internal_straight_weapon_script();
}
inline ::serial::StraightWeaponScript* Script::unsafe_arena_release_straight_weapon_script() {
  // @@protoc_insertion_point(field_unsafe_arena_release:serial.Script.straight_weapon_script)
  if (_internal_has_straight_weapon_script()) {
    clear_has_script_instance();
    ::serial::StraightWeaponScript* temp = script_instance_.straight_weapon_script_;
    script_instance_.straight_weapon_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Script::unsafe_arena_set_allocated_straight_weapon_script(::serial::StraightWeaponScript* straight_weapon_script) {
  clear_script_instance();
  if (straight_weapon_script) {
    set_has_straight_weapon_script();
    script_instance_.straight_weapon_script_ = straight_weapon_script;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Script.straight_weapon_script)
}
inline ::serial::StraightWeaponScript* Script::_internal_mutable_straight_weapon_script() {
  if (!_internal_has_straight_weapon_script()) {
    clear_script_instance();
    set_has_straight_weapon_script();
    script_instance_.straight_weapon_script_ = CreateMaybeMessage< ::serial::StraightWeaponScript >(GetArenaForAllocation());
  }
  return script_instance_.straight_weapon_script_;
}
inline ::serial::StraightWeaponScript* Script::mutable_straight_weapon_script() {
  ::serial::StraightWeaponScript* _msg = _internal_mutable_straight_weapon_script();
  // @@protoc_insertion_point(field_mutable:serial.Script.straight_weapon_script)
  return _msg;
}

// .serial.WeaponScript weapon_script = 10;
inline bool Script::_internal_has_weapon_script() const {
  return script_instance_case() == kWeaponScript;
}
inline bool Script::has_weapon_script() const {
  return _internal_has_weapon_script();
}
inline void Script::set_has_weapon_script() {
  _oneof_case_[0] = kWeaponScript;
}
inline ::serial::WeaponScript* Script::release_weapon_script() {
  // @@protoc_insertion_point(field_release:serial.Script.weapon_script)
  if (_internal_has_weapon_script()) {
    clear_has_script_instance();
      ::serial::WeaponScript* temp = script_instance_.weapon_script_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    script_instance_.weapon_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::serial::WeaponScript& Script::_internal_weapon_script() const {
  return _internal_has_weapon_script()
      ? *script_instance_.weapon_script_
      : reinterpret_cast< ::serial::WeaponScript&>(::serial::_WeaponScript_default_instance_);
}
inline const ::serial::WeaponScript& Script::weapon_script() const {
  // @@protoc_insertion_point(field_get:serial.Script.weapon_script)
  return _internal_weapon_script();
}
inline ::serial::WeaponScript* Script::unsafe_arena_release_weapon_script() {
  // @@protoc_insertion_point(field_unsafe_arena_release:serial.Script.weapon_script)
  if (_internal_has_weapon_script()) {
    clear_has_script_instance();
    ::serial::WeaponScript* temp = script_instance_.weapon_script_;
    script_instance_.weapon_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Script::unsafe_arena_set_allocated_weapon_script(::serial::WeaponScript* weapon_script) {
  clear_script_instance();
  if (weapon_script) {
    set_has_weapon_script();
    script_instance_.weapon_script_ = weapon_script;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Script.weapon_script)
}
inline ::serial::WeaponScript* Script::_internal_mutable_weapon_script() {
  if (!_internal_has_weapon_script()) {
    clear_script_instance();
    set_has_weapon_script();
    script_instance_.weapon_script_ = CreateMaybeMessage< ::serial::WeaponScript >(GetArenaForAllocation());
  }
  return script_instance_.weapon_script_;
}
inline ::serial::WeaponScript* Script::mutable_weapon_script() {
  ::serial::WeaponScript* _msg = _internal_mutable_weapon_script();
  // @@protoc_insertion_point(field_mutable:serial.Script.weapon_script)
  return _msg;
}

// .serial.BulletScript bullet_script = 11;
inline bool Script::_internal_has_bullet_script() const {
  return script_instance_case() == kBulletScript;
}
inline bool Script::has_bullet_script() const {
  return _internal_has_bullet_script();
}
inline void Script::set_has_bullet_script() {
  _oneof_case_[0] = kBulletScript;
}
inline ::serial::BulletScript* Script::release_bullet_script() {
  // @@protoc_insertion_point(field_release:serial.Script.bullet_script)
  if (_internal_has_bullet_script()) {
    clear_has_script_instance();
      ::serial::BulletScript* temp = script_instance_.bullet_script_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    script_instance_.bullet_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::serial::BulletScript& Script::_internal_bullet_script() const {
  return _internal_has_bullet_script()
      ? *script_instance_.bullet_script_
      : reinterpret_cast< ::serial::BulletScript&>(::serial::_BulletScript_default_instance_);
}
inline const ::serial::BulletScript& Script::bullet_script() const {
  // @@protoc_insertion_point(field_get:serial.Script.bullet_script)
  return _internal_bullet_script();
}
inline ::serial::BulletScript* Script::unsafe_arena_release_bullet_script() {
  // @@protoc_insertion_point(field_unsafe_arena_release:serial.Script.bullet_script)
  if (_internal_has_bullet_script()) {
    clear_has_script_instance();
    ::serial::BulletScript* temp = script_instance_.bullet_script_;
    script_instance_.bullet_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Script::unsafe_arena_set_allocated_bullet_script(::serial::BulletScript* bullet_script) {
  clear_script_instance();
  if (bullet_script) {
    set_has_bullet_script();
    script_instance_.bullet_script_ = bullet_script;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Script.bullet_script)
}
inline ::serial::BulletScript* Script::_internal_mutable_bullet_script() {
  if (!_internal_has_bullet_script()) {
    clear_script_instance();
    set_has_bullet_script();
    script_instance_.bullet_script_ = CreateMaybeMessage< ::serial::BulletScript >(GetArenaForAllocation());
  }
  return script_instance_.bullet_script_;
}
inline ::serial::BulletScript* Script::mutable_bullet_script() {
  ::serial::BulletScript* _msg = _internal_mutable_bullet_script();
  // @@protoc_insertion_point(field_mutable:serial.Script.bullet_script)
  return _msg;
}

// .serial.NetworkPlayerScript network_player_script = 12;
inline bool Script::_internal_has_network_player_script() const {
  return script_instance_case() == kNetworkPlayerScript;
}
inline bool Script::has_network_player_script() const {
  return _internal_has_network_player_script();
}
inline void Script::set_has_network_player_script() {
  _oneof_case_[0] = kNetworkPlayerScript;
}
inline ::serial::NetworkPlayerScript* Script::release_network_player_script() {
  // @@protoc_insertion_point(field_release:serial.Script.network_player_script)
  if (_internal_has_network_player_script()) {
    clear_has_script_instance();
      ::serial::NetworkPlayerScript* temp = script_instance_.network_player_script_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    script_instance_.network_player_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::serial::NetworkPlayerScript& Script::_internal_network_player_script() const {
  return _internal_has_network_player_script()
      ? *script_instance_.network_player_script_
      : reinterpret_cast< ::serial::NetworkPlayerScript&>(::serial::_NetworkPlayerScript_default_instance_);
}
inline const ::serial::NetworkPlayerScript& Script::network_player_script() const {
  // @@protoc_insertion_point(field_get:serial.Script.network_player_script)
  return _internal_network_player_script();
}
inline ::serial::NetworkPlayerScript* Script::unsafe_arena_release_network_player_script() {
  // @@protoc_insertion_point(field_unsafe_arena_release:serial.Script.network_player_script)
  if (_internal_has_network_player_script()) {
    clear_has_script_instance();
    ::serial::NetworkPlayerScript* temp = script_instance_.network_player_script_;
    script_instance_.network_player_script_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Script::unsafe_arena_set_allocated_network_player_script(::serial::NetworkPlayerScript* network_player_script) {
  clear_script_instance();
  if (network_player_script) {
    set_has_network_player_script();
    script_instance_.network_player_script_ = network_player_script;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Script.network_player_script)
}
inline ::serial::NetworkPlayerScript* Script::_internal_mutable_network_player_script() {
  if (!_internal_has_network_player_script()) {
    clear_script_instance();
    set_has_network_player_script();
    script_instance_.network_player_script_ = CreateMaybeMessage< ::serial::NetworkPlayerScript >(GetArenaForAllocation());
  }
  return script_instance_.network_player_script_;
}
inline ::serial::NetworkPlayerScript* Script::mutable_network_player_script() {
  ::serial::NetworkPlayerScript* _msg = _internal_mutable_network_player_script();
  // @@protoc_insertion_point(field_mutable:serial.Script.network_player_script)
  return _msg;
}

// .serial.CursorAnimation cursor_animation = 13;
inline bool Script::_internal_has_cursor_animation() const {
  return script_instance_case() == kCursorAnimation;
}
inline bool Script::has_cursor_animation() const {
  return _internal_has_cursor_animation();
}
inline void Script::set_has_cursor_animation() {
  _oneof_case_[0] = kCursorAnimation;
}
inline ::serial::CursorAnimation* Script::release_cursor_animation() {
  // @@protoc_insertion_point(field_release:serial.Script.cursor_animation)
  if (_internal_has_cursor_animation()) {
    clear_has_script_instance();
      ::serial::CursorAnimation* temp = script_instance_.cursor_animation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    script_instance_.cursor_animation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::serial::CursorAnimation& Script::_internal_cursor_animation() const {
  return _internal_has_cursor_animation()
      ? *script_instance_.cursor_animation_
      : reinterpret_cast< ::serial::CursorAnimation&>(::serial::_CursorAnimation_default_instance_);
}
inline const ::serial::CursorAnimation& Script::cursor_animation() const {
  // @@protoc_insertion_point(field_get:serial.Script.cursor_animation)
  return _internal_cursor_animation();
}
inline ::serial::CursorAnimation* Script::unsafe_arena_release_cursor_animation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:serial.Script.cursor_animation)
  if (_internal_has_cursor_animation()) {
    clear_has_script_instance();
    ::serial::CursorAnimation* temp = script_instance_.cursor_animation_;
    script_instance_.cursor_animation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Script::unsafe_arena_set_allocated_cursor_animation(::serial::CursorAnimation* cursor_animation) {
  clear_script_instance();
  if (cursor_animation) {
    set_has_cursor_animation();
    script_instance_.cursor_animation_ = cursor_animation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Script.cursor_animation)
}
inline ::serial::CursorAnimation* Script::_internal_mutable_cursor_animation() {
  if (!_internal_has_cursor_animation()) {
    clear_script_instance();
    set_has_cursor_animation();
    script_instance_.cursor_animation_ = CreateMaybeMessage< ::serial::CursorAnimation >(GetArenaForAllocation());
  }
  return script_instance_.cursor_animation_;
}
inline ::serial::CursorAnimation* Script::mutable_cursor_animation() {
  ::serial::CursorAnimation* _msg = _internal_mutable_cursor_animation();
  // @@protoc_insertion_point(field_mutable:serial.Script.cursor_animation)
  return _msg;
}

// uint32 go_id = 14;
inline void Script::clear_go_id() {
  go_id_ = 0u;
}
inline uint32_t Script::_internal_go_id() const {
  return go_id_;
}
inline uint32_t Script::go_id() const {
  // @@protoc_insertion_point(field_get:serial.Script.go_id)
  return _internal_go_id();
}
inline void Script::_internal_set_go_id(uint32_t value) {
  
  go_id_ = value;
}
inline void Script::set_go_id(uint32_t value) {
  _internal_set_go_id(value);
  // @@protoc_insertion_point(field_set:serial.Script.go_id)
}

inline bool Script::has_script_instance() const {
  return script_instance_case() != SCRIPT_INSTANCE_NOT_SET;
}
inline void Script::clear_has_script_instance() {
  _oneof_case_[0] = SCRIPT_INSTANCE_NOT_SET;
}
inline Script::ScriptInstanceCase Script::script_instance_case() const {
  return Script::ScriptInstanceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BasicGameObject

// repeated .serial.GameObject children_objects = 1;
inline int BasicGameObject::_internal_children_objects_size() const {
  return children_objects_.size();
}
inline int BasicGameObject::children_objects_size() const {
  return _internal_children_objects_size();
}
inline void BasicGameObject::clear_children_objects() {
  children_objects_.Clear();
}
inline ::serial::GameObject* BasicGameObject::mutable_children_objects(int index) {
  // @@protoc_insertion_point(field_mutable:serial.BasicGameObject.children_objects)
  return children_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::GameObject >*
BasicGameObject::mutable_children_objects() {
  // @@protoc_insertion_point(field_mutable_list:serial.BasicGameObject.children_objects)
  return &children_objects_;
}
inline const ::serial::GameObject& BasicGameObject::_internal_children_objects(int index) const {
  return children_objects_.Get(index);
}
inline const ::serial::GameObject& BasicGameObject::children_objects(int index) const {
  // @@protoc_insertion_point(field_get:serial.BasicGameObject.children_objects)
  return _internal_children_objects(index);
}
inline ::serial::GameObject* BasicGameObject::_internal_add_children_objects() {
  return children_objects_.Add();
}
inline ::serial::GameObject* BasicGameObject::add_children_objects() {
  ::serial::GameObject* _add = _internal_add_children_objects();
  // @@protoc_insertion_point(field_add:serial.BasicGameObject.children_objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::GameObject >&
BasicGameObject::children_objects() const {
  // @@protoc_insertion_point(field_list:serial.BasicGameObject.children_objects)
  return children_objects_;
}

// repeated .serial.Script children_scripts = 2;
inline int BasicGameObject::_internal_children_scripts_size() const {
  return children_scripts_.size();
}
inline int BasicGameObject::children_scripts_size() const {
  return _internal_children_scripts_size();
}
inline void BasicGameObject::clear_children_scripts() {
  children_scripts_.Clear();
}
inline ::serial::Script* BasicGameObject::mutable_children_scripts(int index) {
  // @@protoc_insertion_point(field_mutable:serial.BasicGameObject.children_scripts)
  return children_scripts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::Script >*
BasicGameObject::mutable_children_scripts() {
  // @@protoc_insertion_point(field_mutable_list:serial.BasicGameObject.children_scripts)
  return &children_scripts_;
}
inline const ::serial::Script& BasicGameObject::_internal_children_scripts(int index) const {
  return children_scripts_.Get(index);
}
inline const ::serial::Script& BasicGameObject::children_scripts(int index) const {
  // @@protoc_insertion_point(field_get:serial.BasicGameObject.children_scripts)
  return _internal_children_scripts(index);
}
inline ::serial::Script* BasicGameObject::_internal_add_children_scripts() {
  return children_scripts_.Add();
}
inline ::serial::Script* BasicGameObject::add_children_scripts() {
  ::serial::Script* _add = _internal_add_children_scripts();
  // @@protoc_insertion_point(field_add:serial.BasicGameObject.children_scripts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::Script >&
BasicGameObject::children_scripts() const {
  // @@protoc_insertion_point(field_list:serial.BasicGameObject.children_scripts)
  return children_scripts_;
}

// repeated string tags = 3;
inline int BasicGameObject::_internal_tags_size() const {
  return tags_.size();
}
inline int BasicGameObject::tags_size() const {
  return _internal_tags_size();
}
inline void BasicGameObject::clear_tags() {
  tags_.Clear();
}
inline std::string* BasicGameObject::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:serial.BasicGameObject.tags)
  return _s;
}
inline const std::string& BasicGameObject::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& BasicGameObject::tags(int index) const {
  // @@protoc_insertion_point(field_get:serial.BasicGameObject.tags)
  return _internal_tags(index);
}
inline std::string* BasicGameObject::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:serial.BasicGameObject.tags)
  return tags_.Mutable(index);
}
inline void BasicGameObject::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:serial.BasicGameObject.tags)
}
inline void BasicGameObject::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:serial.BasicGameObject.tags)
}
inline void BasicGameObject::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:serial.BasicGameObject.tags)
}
inline void BasicGameObject::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:serial.BasicGameObject.tags)
}
inline std::string* BasicGameObject::_internal_add_tags() {
  return tags_.Add();
}
inline void BasicGameObject::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:serial.BasicGameObject.tags)
}
inline void BasicGameObject::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:serial.BasicGameObject.tags)
}
inline void BasicGameObject::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:serial.BasicGameObject.tags)
}
inline void BasicGameObject::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:serial.BasicGameObject.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BasicGameObject::tags() const {
  // @@protoc_insertion_point(field_list:serial.BasicGameObject.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BasicGameObject::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:serial.BasicGameObject.tags)
  return &tags_;
}

// .serial.Sprite sprite = 4;
inline bool BasicGameObject::_internal_has_sprite() const {
  return this != internal_default_instance() && sprite_ != nullptr;
}
inline bool BasicGameObject::has_sprite() const {
  return _internal_has_sprite();
}
inline void BasicGameObject::clear_sprite() {
  if (GetArenaForAllocation() == nullptr && sprite_ != nullptr) {
    delete sprite_;
  }
  sprite_ = nullptr;
}
inline const ::serial::Sprite& BasicGameObject::_internal_sprite() const {
  const ::serial::Sprite* p = sprite_;
  return p != nullptr ? *p : reinterpret_cast<const ::serial::Sprite&>(
      ::serial::_Sprite_default_instance_);
}
inline const ::serial::Sprite& BasicGameObject::sprite() const {
  // @@protoc_insertion_point(field_get:serial.BasicGameObject.sprite)
  return _internal_sprite();
}
inline void BasicGameObject::unsafe_arena_set_allocated_sprite(
    ::serial::Sprite* sprite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sprite_);
  }
  sprite_ = sprite;
  if (sprite) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.BasicGameObject.sprite)
}
inline ::serial::Sprite* BasicGameObject::release_sprite() {
  
  ::serial::Sprite* temp = sprite_;
  sprite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serial::Sprite* BasicGameObject::unsafe_arena_release_sprite() {
  // @@protoc_insertion_point(field_release:serial.BasicGameObject.sprite)
  
  ::serial::Sprite* temp = sprite_;
  sprite_ = nullptr;
  return temp;
}
inline ::serial::Sprite* BasicGameObject::_internal_mutable_sprite() {
  
  if (sprite_ == nullptr) {
    auto* p = CreateMaybeMessage<::serial::Sprite>(GetArenaForAllocation());
    sprite_ = p;
  }
  return sprite_;
}
inline ::serial::Sprite* BasicGameObject::mutable_sprite() {
  ::serial::Sprite* _msg = _internal_mutable_sprite();
  // @@protoc_insertion_point(field_mutable:serial.BasicGameObject.sprite)
  return _msg;
}
inline void BasicGameObject::set_allocated_sprite(::serial::Sprite* sprite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sprite_;
  }
  if (sprite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::serial::Sprite>::GetOwningArena(sprite);
    if (message_arena != submessage_arena) {
      sprite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sprite, submessage_arena);
    }
    
  } else {
    
  }
  sprite_ = sprite;
  // @@protoc_insertion_point(field_set_allocated:serial.BasicGameObject.sprite)
}

// bool visible = 5;
inline void BasicGameObject::clear_visible() {
  visible_ = false;
}
inline bool BasicGameObject::_internal_visible() const {
  return visible_;
}
inline bool BasicGameObject::visible() const {
  // @@protoc_insertion_point(field_get:serial.BasicGameObject.visible)
  return _internal_visible();
}
inline void BasicGameObject::_internal_set_visible(bool value) {
  
  visible_ = value;
}
inline void BasicGameObject::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:serial.BasicGameObject.visible)
}

// .serial.Box2DType box2d_type = 6;
inline void BasicGameObject::clear_box2d_type() {
  box2d_type_ = 0;
}
inline ::serial::Box2DType BasicGameObject::_internal_box2d_type() const {
  return static_cast< ::serial::Box2DType >(box2d_type_);
}
inline ::serial::Box2DType BasicGameObject::box2d_type() const {
  // @@protoc_insertion_point(field_get:serial.BasicGameObject.box2d_type)
  return _internal_box2d_type();
}
inline void BasicGameObject::_internal_set_box2d_type(::serial::Box2DType value) {
  
  box2d_type_ = value;
}
inline void BasicGameObject::set_box2d_type(::serial::Box2DType value) {
  _internal_set_box2d_type(value);
  // @@protoc_insertion_point(field_set:serial.BasicGameObject.box2d_type)
}

// .serial.RenderLayer render_layer = 7;
inline void BasicGameObject::clear_render_layer() {
  render_layer_ = 0;
}
inline ::serial::RenderLayer BasicGameObject::_internal_render_layer() const {
  return static_cast< ::serial::RenderLayer >(render_layer_);
}
inline ::serial::RenderLayer BasicGameObject::render_layer() const {
  // @@protoc_insertion_point(field_get:serial.BasicGameObject.render_layer)
  return _internal_render_layer();
}
inline void BasicGameObject::_internal_set_render_layer(::serial::RenderLayer value) {
  
  render_layer_ = value;
}
inline void BasicGameObject::set_render_layer(::serial::RenderLayer value) {
  _internal_set_render_layer(value);
  // @@protoc_insertion_point(field_set:serial.BasicGameObject.render_layer)
}

// uint32 id = 8;
inline void BasicGameObject::clear_id() {
  id_ = 0u;
}
inline uint32_t BasicGameObject::_internal_id() const {
  return id_;
}
inline uint32_t BasicGameObject::id() const {
  // @@protoc_insertion_point(field_get:serial.BasicGameObject.id)
  return _internal_id();
}
inline void BasicGameObject::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void BasicGameObject::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:serial.BasicGameObject.id)
}

// -------------------------------------------------------------------

// Sprite_Scale

// float scale_x = 1;
inline void Sprite_Scale::clear_scale_x() {
  scale_x_ = 0;
}
inline float Sprite_Scale::_internal_scale_x() const {
  return scale_x_;
}
inline float Sprite_Scale::scale_x() const {
  // @@protoc_insertion_point(field_get:serial.Sprite.Scale.scale_x)
  return _internal_scale_x();
}
inline void Sprite_Scale::_internal_set_scale_x(float value) {
  
  scale_x_ = value;
}
inline void Sprite_Scale::set_scale_x(float value) {
  _internal_set_scale_x(value);
  // @@protoc_insertion_point(field_set:serial.Sprite.Scale.scale_x)
}

// float scale_y = 2;
inline void Sprite_Scale::clear_scale_y() {
  scale_y_ = 0;
}
inline float Sprite_Scale::_internal_scale_y() const {
  return scale_y_;
}
inline float Sprite_Scale::scale_y() const {
  // @@protoc_insertion_point(field_get:serial.Sprite.Scale.scale_y)
  return _internal_scale_y();
}
inline void Sprite_Scale::_internal_set_scale_y(float value) {
  
  scale_y_ = value;
}
inline void Sprite_Scale::set_scale_y(float value) {
  _internal_set_scale_y(value);
  // @@protoc_insertion_point(field_set:serial.Sprite.Scale.scale_y)
}

// -------------------------------------------------------------------

// Sprite

// string texture_path = 1;
inline void Sprite::clear_texture_path() {
  texture_path_.ClearToEmpty();
}
inline const std::string& Sprite::texture_path() const {
  // @@protoc_insertion_point(field_get:serial.Sprite.texture_path)
  return _internal_texture_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sprite::set_texture_path(ArgT0&& arg0, ArgT... args) {
 
 texture_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serial.Sprite.texture_path)
}
inline std::string* Sprite::mutable_texture_path() {
  std::string* _s = _internal_mutable_texture_path();
  // @@protoc_insertion_point(field_mutable:serial.Sprite.texture_path)
  return _s;
}
inline const std::string& Sprite::_internal_texture_path() const {
  return texture_path_.Get();
}
inline void Sprite::_internal_set_texture_path(const std::string& value) {
  
  texture_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Sprite::_internal_mutable_texture_path() {
  
  return texture_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Sprite::release_texture_path() {
  // @@protoc_insertion_point(field_release:serial.Sprite.texture_path)
  return texture_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Sprite::set_allocated_texture_path(std::string* texture_path) {
  if (texture_path != nullptr) {
    
  } else {
    
  }
  texture_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), texture_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (texture_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    texture_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serial.Sprite.texture_path)
}

// .serial.Vector2f position = 2;
inline bool Sprite::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Sprite::has_position() const {
  return _internal_has_position();
}
inline const ::serial::Vector2f& Sprite::_internal_position() const {
  const ::serial::Vector2f* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::serial::Vector2f&>(
      ::serial::_Vector2f_default_instance_);
}
inline const ::serial::Vector2f& Sprite::position() const {
  // @@protoc_insertion_point(field_get:serial.Sprite.position)
  return _internal_position();
}
inline void Sprite::unsafe_arena_set_allocated_position(
    ::serial::Vector2f* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Sprite.position)
}
inline ::serial::Vector2f* Sprite::release_position() {
  
  ::serial::Vector2f* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serial::Vector2f* Sprite::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:serial.Sprite.position)
  
  ::serial::Vector2f* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::serial::Vector2f* Sprite::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::serial::Vector2f>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::serial::Vector2f* Sprite::mutable_position() {
  ::serial::Vector2f* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:serial.Sprite.position)
  return _msg;
}
inline void Sprite::set_allocated_position(::serial::Vector2f* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:serial.Sprite.position)
}

// .serial.Sprite.Scale scale = 5;
inline bool Sprite::_internal_has_scale() const {
  return this != internal_default_instance() && scale_ != nullptr;
}
inline bool Sprite::has_scale() const {
  return _internal_has_scale();
}
inline void Sprite::clear_scale() {
  if (GetArenaForAllocation() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
}
inline const ::serial::Sprite_Scale& Sprite::_internal_scale() const {
  const ::serial::Sprite_Scale* p = scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::serial::Sprite_Scale&>(
      ::serial::_Sprite_Scale_default_instance_);
}
inline const ::serial::Sprite_Scale& Sprite::scale() const {
  // @@protoc_insertion_point(field_get:serial.Sprite.scale)
  return _internal_scale();
}
inline void Sprite::unsafe_arena_set_allocated_scale(
    ::serial::Sprite_Scale* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Sprite.scale)
}
inline ::serial::Sprite_Scale* Sprite::release_scale() {
  
  ::serial::Sprite_Scale* temp = scale_;
  scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serial::Sprite_Scale* Sprite::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:serial.Sprite.scale)
  
  ::serial::Sprite_Scale* temp = scale_;
  scale_ = nullptr;
  return temp;
}
inline ::serial::Sprite_Scale* Sprite::_internal_mutable_scale() {
  
  if (scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::serial::Sprite_Scale>(GetArenaForAllocation());
    scale_ = p;
  }
  return scale_;
}
inline ::serial::Sprite_Scale* Sprite::mutable_scale() {
  ::serial::Sprite_Scale* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:serial.Sprite.scale)
  return _msg;
}
inline void Sprite::set_allocated_scale(::serial::Sprite_Scale* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete scale_;
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::serial::Sprite_Scale>::GetOwningArena(scale);
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:serial.Sprite.scale)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serial

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::serial::RenderLayer> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::serial::RenderLayer>() {
  return ::serial::RenderLayer_descriptor();
}
template <> struct is_proto_enum< ::serial::Box2DType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::serial::Box2DType>() {
  return ::serial::Box2DType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scene_2eproto
